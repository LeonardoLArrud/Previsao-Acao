# -*- coding: utf-8 -*-
"""Cópia de colab-github-demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V0vIhEj1YthHkW9rG3mluWdAHrpwIgHP

# Using Google Colab with GitHub
"""

!sudo pip install xgboost

!sudo pip install keras

!sudo pip install tensorflow

!sudo pip install scikit-learn

!sudo pip install yfinance --upgrade --no-cache-dir

!sudo pip install matplotlib

import pandas as pd
import xgboost as xgb
import matplotlib.pyplot as plt
import numpy as np
from pandas_datareader import data as pdr
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
import yfinance as yf
from datetime import datetime
from datetime import timedelta
pd.options.mode.chained_assignment = None

#Pegar dados da acao e definir periodo teste
acao = "VALE3.SA"

inicio = "2014-01-01"
final = "2024-03-17"
yf.pdr_override()
dados_acao = pdr.get_data_yahoo(acao, inicio, final)

dados_acao

cotacao = dados_acao['Close'].to_numpy().reshape(-1, 1)
tamanho_treinamento = int(len(cotacao) *0.9)
cotacao

#Escalar dados entre 0 e 1, ficar mais facil processamento
escalador = MinMaxScaler(feature_range=(0,1))
novo_dado_treinamento = escalador.fit_transform(cotacao[0: tamanho_treinamento, :])
dados_teste = escalador.transform(cotacao[tamanho_treinamento: , :])
dados_0_1 = np.vstack((novo_dado_treinamento, dados_teste))

dados_0_1

dados_treinamento = dados_0_1[0: tamanho_treinamento, :]

#dados usados para gerar resultado
treinamento_x = []
#cotacao real
treinamento_y = []

for i in range(200, len(dados_treinamento)):
    treinamento_x.append(dados_treinamento[i - 200: i, 0])
    treinamento_y.append(dados_treinamento[i, 0])

#transformar as listas em arrays de novo
treinamento_x, treinamento_y =np.array(treinamento_x), np.array(treinamento_y)
treinamento_x = treinamento_x.reshape(treinamento_x.shape[0], treinamento_x.shape[1],1)

#modelo
from keras.layers import Dense, LSTM
modelo = Sequential()

modelo.add(LSTM(50, return_sequences =True, input_shape = (treinamento_x.shape[1], 1)))
modelo.add(LSTM(50, return_sequences = False))
modelo.add(Dense(25))
modelo.add(Dense(1))

#compilar modelo
modelo.compile(optimizer="adam", loss="mean_squared_error")
#treinamento do modelo
modelo.fit(treinamento_x, treinamento_y, batch_size=1, epochs=1)



dados_teste = dados_0_1[tamanho_treinamento - 200:, :]

teste_x = []
teste_y = cotacao[tamanho_treinamento:, :]

for i in range (200, len(dados_teste)):
   teste_x.append(dados_teste[i-200: i, 0])

teste_x = np.array(teste_x)
teste_x = teste_x.reshape(teste_x.shape[0], teste_x.shape[1], 1)

#previsoes do modelo
previsoes = modelo.predict(teste_x)
previsoes = escalador.inverse_transform(previsoes)
previsoes

#pegar erro quadratico medio
rmse = np.sqrt(np.mean(previsoes-teste_y) ** 2)
rmse



#grafico do modelo
treinamento = dados_acao.iloc[:tamanho_treinamento, :]
df_test = pd.DataFrame({"Close" : dados_acao['Close'].iloc[tamanho_treinamento:], "previsoes": previsoes.reshape(len(previsoes))})

plt.figure(figsize =(16, 8))
plt.title('Modello')
plt.xlabel('Data', fontsize = 18)
plt.ylabel("Preco de Fechamento", fontsize = 18)
plt.plot(treinamento['Close'])
plt.plot(df_test[['Close', 'previsoes']])
plt.legend(['Treinamento', 'Real', 'Previsoes'], loc=2, prop={'size': 16})
plt.show()

#MOstrar preco real e previsto
df_test.sort_index()
df_test

#calcular media de acertos e expectativa de lucro
df_test['variacao_percentual_acao'] = df_test['Close'].pct_change()
df_test['variacao_percentual_modelo'] = df_test['previsoes'].pct_change()

df_test = df_test.dropna()

df_test['var_acao_maior_menor_que_zero'] = np.where(df_test['variacao_percentual_acao'] > 0, True, False)
df_test['var_modelo_maior_menor_que_zero'] = np.where(df_test['variacao_percentual_modelo'] > 0, True, False)

df_test['acertou_o_lado'] = np.where(df_test['var_acao_maior_menor_que_zero'] == df_test['var_modelo_maior_menor_que_zero'], True, False)
df_test['variacao_percentual_acao_abs'] = df_test['variacao_percentual_acao'].abs()

df_test

acertou_lado = df_test['acertou_o_lado'].sum()/len(df_test['acertou_o_lado'])
errou_lado = 1- acertou_lado

media_lucro = df_test.groupby('acertou_o_lado')['variacao_percentual_acao_abs'].mean()
exp_mat_lucro = acertou_lado * media_lucro[1] - media_lucro[0] * errou_lado

ganho_sobre_perda = media_lucro[1]/media_lucro[0]

print(media_lucro)
print(ganho_sobre_perda)
print(acertou_lado)
print(exp_mat_lucro * 100)

"""[Google Colaboratory](http://colab.research.google.com) is designed to integrate cleanly with GitHub, allowing both loading notebooks from github and saving notebooks to github.

## Loading Public Notebooks Directly from GitHub

Colab can load public github notebooks directly, with no required authorization step.

For example, consider the notebook at this address: https://github.com/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb.

The direct colab link to this notebook is: https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb.

To generate such links in one click, you can use the [Open in Colab](https://chrome.google.com/webstore/detail/open-in-colab/iogfkhleblhcpcekbiedikdehleodpjo) Chrome extension.

## Browsing GitHub Repositories from Colab

Colab also supports special URLs that link directly to a GitHub browser for any user/organization, repository, or branch. For example:

- http://colab.research.google.com/github will give you a general github browser, where you can search for any github organization or username.
- http://colab.research.google.com/github/googlecolab/ will open the repository browser for the ``googlecolab`` organization. Replace ``googlecolab`` with any other github org or user to see their repositories.
- http://colab.research.google.com/github/googlecolab/colabtools/ will let you browse the main branch of the ``colabtools`` repository within the ``googlecolab`` organization. Substitute any user/org and repository to see its contents.
- http://colab.research.google.com/github/googlecolab/colabtools/blob/master will let you browse ``master`` branch of the ``colabtools`` repository within the ``googlecolab`` organization. (don't forget the ``blob`` here!) You can specify any valid branch for any valid repository.

## Loading Private Notebooks

Loading a notebook from a private GitHub repository is possible, but requires an additional step to allow Colab to access your files.
Do the following:

1. Navigate to http://colab.research.google.com/github.
2. Click the "Include Private Repos" checkbox.
3. In the popup window, sign-in to your Github account and authorize Colab to read the private files.
4. Your private repositories and notebooks will now be available via the github navigation pane.

## Saving Notebooks To GitHub or Drive

Any time you open a GitHub hosted notebook in Colab, it opens a new editable view of the notebook. You can run and modify the notebook without worrying about overwriting the source.

If you would like to save your changes from within Colab, you can use the File menu to save the modified notebook either to Google Drive or back to GitHub. Choose **File→Save a copy in Drive** or **File→Save a copy to GitHub** and follow the resulting prompts. To save a Colab notebook to GitHub requires giving Colab permission to push the commit to your repository.

## Open In Colab Badge

Anybody can open a copy of any github-hosted notebook within Colab. To make it easier to give people access to live views of GitHub-hosted notebooks,
colab provides a [shields.io](http://shields.io/)-style badge, which appears as follows:

[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)

The markdown for the above badge is the following:

```markdown
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)
```

The HTML equivalent is:

```HTML
<a href="https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb">
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>
</a>
```

Remember to replace the notebook URL in this template with the notebook you want to link to.
"""

